import*as t from"d3";import*as e from"d3-tile";var i={d:(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},s={};i.d(s,{e:()=>l,K:()=>c});const h=(o={geoMercator:()=>t.geoMercator,geoPath:()=>t.geoPath,select:()=>t.select,zoom:()=>t.zoom,zoomIdentity:()=>t.zoomIdentity},a={},i.d(a,o),a);var o,a;const r=(t=>{var e={};return i.d(e,t),e})({tile:()=>e.tile});class l{tileSize=256;nTileWidth=2;getUrl=(t,e,i)=>`https://tile.openstreetmap.org/${i}/${t}/${e}.png`;constructor(t,e,i,s){this.width=e,this.height=i,this.ctx=t,this.tileSet=r.tile().size([e,i]),this.idx=0,this.tilesRemaining=0,s&&(this.getUrl=s)}scaledTiles(t){return this.tileSet.scale(t.k).translate([t.x,t.y])()}update(t){this.idx+=1,this.drawTiles(this.scaledTiles(t))}getImage(t,e,i){const s=new Image;return s.src=this.getUrl(t,e,i),s}drawTiles(t){const e=t.scale;this.tilesRemaining=t.length,this.tileExtent={min:{x:t[0][0],y:t[0][1]},max:{x:t[t.length-1][0],y:t[t.length-1][1]},z:t[0][2]};const i=Math.round(t.translate[0]*e)/e,s=Math.round(t.translate[1]*e)/e;for(const[h,o,a]of t){const t=this.getImage(h,o,a);this.drawTile(t,h+i,o+s,e),t.complete||this.getPlaceholderTile(h,o,a,i,s,e)}}reset(){this.ctx.clearRect(0,0,this.width,this.height)}getCachedImage(t,e,i){let s=this.getImage(t,e,i);return s.complete?s:(s.src="",null)}zoomedInCoordinates(t,e,i,s){const h=Math.pow(this.nTileWidth,s),o=Math.floor(t*h),a=Math.floor(e*h);return Array.from({length:Math.pow(h,2)},((t,e)=>[o+e%h,a+Math.floor(e/h),i+s]))}zoomedOutCoordinates(t,e,i,s){const h=Math.pow(this.nTileWidth,s),o=Math.pow(this.nTileWidth,-s),a=h*(t%o),r=h*(e%o);return{tile:[Math.floor(t*h),Math.floor(e*h),i+s],offset:[a,r]}}drawHighResTiles(t,e,i,s){const h=s/2;t.forEach(((t,o)=>{if(null==t)return;const a=e*s+o%this.nTileWidth*h,r=i*s+Math.floor(o/this.nTileWidth)*h;this.ctx.drawImage(t,a,r,h,h)}))}getPlaceholderTile(t,e,i,s,h,o){let a=this.zoomedInCoordinates(t,e,i,1).map((t=>this.getCachedImage(...t)));a.filter(Boolean)==a.length&&this.drawHighResTiles(a,t+s,e+h,o);{let r,l,n,c,d;for(let a=i-1;a>=0;a--)if(d=a-i,l=this.zoomedOutCoordinates(t,e,i,d),r=this.getCachedImage(...l.tile),r){n=l.offset[0],c=l.offset[1],this.ctx.drawImage(r,n*this.tileSize,c*this.tileSize,this.tileSize/Math.pow(this.nTileWidth,-d),this.tileSize/Math.pow(this.nTileWidth,-d),(t+s)*o,(e+h)*o,o,o);break}this.drawHighResTiles(a,t+s,e+h,o)}}drawTile(t,e,i,s){const h=this.idx,o=()=>{this.idx==h&&(this.tilesRemaining-=1,this.ctx.drawImage(t,e*s,i*s,s,s),this.tilesRemaining<=0&&this.prefetchImages(this.tileExtent,2))};t.complete?o():t.onload=o}prefetchImages(t,e){let i=new Set;const s=t.z;for(let h=t.min.x-e;h<=t.max.x+e;h++)for(let o=t.min.y-e;o<=t.max.y+e;o++)i.add([h,o,s]);const h=-Math.max(0,s-2);for(let o=t.min.x-e;o<=t.max.x+e;o+=3)for(let a=t.min.y-e;a<=t.max.y+e;a+=3)i.add(this.zoomedOutCoordinates(o,a,s,h).tile);i.forEach((([t,e,i])=>this.getImage(t,e,i)))}}const n=2*Math.PI;class c{constructor(t,e,i,s,o,a){this.root=t,this.margin=s||{top:0,right:0,bottom:0,left:0},this.width=e-this.margin.left-this.margin.right,this.height=i-this.margin.top-this.margin.bottom,this.getTileUrl=o,this.projection=null,this.zoomCallback=a||(()=>{}),this.zoom=h.zoom().scaleExtent([4096,1<<25]).extent([[0,0],[this.width,this.height]])}initMap(){const t=h.select(this.root).selectAll("#map").data([1]).join((t=>t.append("div").attr("id","map").style("position","relative").style("margin",`${this.margin.top}px ${this.margin.right}px ${this.margin.bottom}px ${this.margin.left}px`).style("width",`${this.width}px`).style("height",`${this.height}px`)));return t.append("canvas").attr("id","tile-canvas").attr("width",this.width).attr("height",this.height),t.append("svg").attr("id","map-svg").attr("width",this.width).attr("height",this.height),this.map_el=t.node(),this.projection=h.geoMercator(),this.tileFetcher=new l(document.querySelector("#tile-canvas").getContext("2d"),this.width,this.height,this.getTileUrl),t}resetMap(){return this.map_el&&(this.map_el.innerHTML=""),this.initMap()}render(t){h.select("#map").empty()&&this.initMap(),this.zoom.on("zoom",(t=>{this.tileFetcher.update(t.transform),this.updateProjection(t.transform),this.zoomCallback(t.transform)}));const e=h.select("#map").select("svg");this.setInitialZoom(e.call(this.zoom),t)}setInitialZoom(t,e){this.updateProjection({k:1,x:0,y:0});const i=this.dataPos(e);t.call(this.zoom.transform,h.zoomIdentity.translate(this.width/2,this.height/2).scale(i.scale).translate(-i.center[0],-i.center[1]))}dataPos(t){const e=h.geoPath(this.projection).bounds(t);let i=e[1][0]-e[0][0],s=e[1][1]-e[0][1];return{scale:Math.min(.9/Math.max(i/this.width,s/this.height),1<<25),center:[e[0][0]+.5*i,e[0][1]+.5*s]}}updateProjection(t){this.projection.scale(t.k/n).translate([t.x,t.y])}}var d=s.e,m=s.K;export{d as TileFetcher,m as TileMap};